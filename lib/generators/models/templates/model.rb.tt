# frozen_string_literal: true

<% module_namespacing do -%>
class <%= model.class_name %> < ApplicationRecord
<% if model.slug_type == :ephemeral -%>
  include HasEphemeralSystemSlug
<% end -%>
<% if model.tenant? -%>
  include BelongsToTenant
<% end -%>
<% if model.state_machine? -%>
  include UsesStatesman
<% end -%>
  include TimestampScopes
<% model.polymorphic_has_many_references.each do |reference| -%>
  include <%= reference.concern_class_name %>
<% end -%>
<% unless model.references.empty? -%>

<% end -%>
<% model.references.each do |reference| -%>
  belongs_to :<%= reference.target %><% unless reference.polymorphic? %>, inverse_of: :<%= model.plural_name %><% end %><%= ", polymorphic: true" if reference.polymorphic? %>
<% end -%>
<% unless model.has_many_references.empty? -%>

<% end -%>
<% model.has_many_references.each do |reference| -%>
  has_many :<%= reference.source_model.plural_name %>, inverse_of: :<%= model.singular_name %>, dependent: :<%= reference.dependent %>
<% end -%>
<% unless model.has_many_through_references.empty? -%>

<% end -%>
<% model.has_many_through_references.each do |reference| -%>
  has_many :<%= reference.plural_name %>, through: :<%=reference.source_model.plural_name %>
<% end -%>
<% if model.orderable? -%>

  acts_as_list <% unless model.order_scopes.empty? %>scope: [:<%= model.order_scopes.join(", :") %>]<% end %>
<% end -%>
<% if model.state_machine? -%>

  has_state_machine! predicates: :ALL
<% end -%>
end
<% end -%>

# frozen_string_literal: true

module Migration
  module MultiTenantHelper
    # @param table_name [Symbol] The name of the distributed tenant table
    # @param options [Hash] Options passed to Rails' create_table method
    # @yield table_definition Passes the table definition to the block
    def create_tenant_table(table_name, options = {}, &)
      options[:id] = :uuid
      options[:partition_key] = :tenant_id
      create_table(table_name, **options) do |t|
        t.references :tenant, null: false, foreign_key: { on_delete: :cascade }, type: :uuid

        yield t if block_given?
      end

      reversible do |dir|
        dir.up { create_distributed_table table_name, :tenant_id }
      end
    end

    # @param source [Symbol] The name of the table containing the unique constraint
    # @param field [Symbol] The field that should be unique
    # @return [void]
    def add_unique_index(source, field)
      index_name = "fk_#{source}_#{field}_unique"
      create = <<-SQL
        ALTER TABLE #{source}#{' '}
        ADD CONSTRAINT #{index_name}#{' '}
        UNIQUE (tenant_id, #{field})
      SQL

      reversible do |dir|
        dir.up do
          execute create.delete("\n").squeeze(" ")
        end
        dir.down do
          execute "ALTER TABLE #{source} DROP CONSTRAINT #{index_name}"
        end
      end
    end

    # @param source [Symbol] The name of the table containing the foreign key
    # @param target [Symbol] The singular table name that's being referenced
    # @param on_delete [Symbol] on_delete to take on delete, `:restrict` or `:cascade` or `:nullify`
    # @return [void]
    def add_distributed_foreign_key(source, target, on_delete)
      target_id_field = "#{target.to_s.singularize}_id"
      target_table = target.to_s.pluralize
      index_name = "fk_#{target_table.to_s[0, 15]}_#{target_id_field}_tenant_id"

      create = <<-SQL
        ALTER TABLE #{source}#{' '}
        ADD CONSTRAINT #{index_name}#{' '}
        FOREIGN KEY (#{target_id_field}, tenant_id)#{' '}
        REFERENCES #{target_table}(id, tenant_id)#{' '}
        ON DELETE #{on_delete.to_s.upcase}
      SQL

      reversible do |dir|
        dir.up do
          execute create.delete("\n").squeeze(" ")
        end
        dir.down do
          execute "ALTER TABLE #{source} DROP CONSTRAINT #{index_name}"
        end
      end
    end
  end
end

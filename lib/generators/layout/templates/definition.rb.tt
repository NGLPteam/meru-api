<%-
  # vim: set ft=ruby.eruby nosmartindent noautoindent :
-%>
# frozen_string_literal: true

module Layouts
  # @see <%= layout_record.instance_klass_name %>
  # @see <%= layout_record.gql_definition_klass_name %>
  <%- layout_record.templates.each do |template| -%>
  # @see <%= template.definition_klass_name %>
  <%- end -%>
  class <%= class_name %>Definition < ApplicationRecord
    include HasEphemeralSystemSlug
    include LayoutDefinition
    include TimestampScopes

    layout_kind! <%= layout_kind.to_sym.inspect %>
    template_kinds! <%= template_kinds.inspect %>.freeze

    graphql_node_type_name "::<%= layout_record.gql_definition_klass_name %>"

    belongs_to :schema_version, inverse_of: :<%= layout_kind %>_layout_definitions
    belongs_to :entity, polymorphic: true, optional: true

    has_many :layout_instances,
      class_name: <%= layout_record.instance_klass_name.inspect %>,
      dependent: :destroy,
      inverse_of: :layout_definition,
      foreign_key: :layout_definition_id
    <%- layout_record.templates.each do |template| -%>

    has_many :<%= template.template_kind %>_template_definitions,
      class_name: <%= template.definition_klass_name.inspect %>,
      dependent: :destroy,
      inverse_of: :layout_definition,
      foreign_key: :layout_definition_id
    <%- end -%>
    <%- if has_single_template? -%>

    has_one :template_definition,
      -> { in_recent_order },
      class_name: <%= layout_record.templates.first.definition_klass_name.inspect %>,
      dependent: :destroy,
      inverse_of: :layout_definition,
      foreign_key: :layout_definition_id
    <%- end -%>
  end
end

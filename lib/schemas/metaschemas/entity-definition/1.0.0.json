{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "WDP Entity Definition Schema",
  "description": "A meta-schema used by the NGLP Web Delivery Platform for validating its entity schemas.",
  "$defs": {
    "Association": {
      "type": "object",
      "description": "A hierarchical declaration that determines what types of schemas can be above and below this schema.",
      "properties": {
        "namespace": {
          "$ref": "#/$defs/Namespace"
        },
        "identifier": {
          "$ref": "#/$defs/Identifier"
        },
        "version": {
          "description": "An optional declaration of the supported versions of the associated schema",
          "oneOf": [
            {
              "$ref": "#/$defs/VersionRequirement"
            },
            {
              "$ref": "#/$defs/VersionRequirements"
            }
          ]
        }
      },
      "required": ["namespace", "identifier"]
    },
    "AssociationSansVersion": {
      "type": "object",
      "description": "A hierarchical declaration that determines what types of schemas can be above and below this schema.",
      "additionalProperties": false,
      "properties": {
        "namespace": {
          "$ref": "#/$defs/Namespace"
        },
        "identifier": {
          "$ref": "#/$defs/Identifier"
        }
      },
      "required": ["namespace", "identifier"]
    },
    "Associations": {
      "type": "array",
      "description": "Limit the selection to entities that consume these schemas",
      "items": {
        "description": "The acceptable schema(s) for this association type",
        "$ref": "#/$defs/Association"
      }
    },
    "CollectedReferenceProperties": {
      "description": "Shared properties for collected reference property types",
      "type": "object",
      "properties": {
        "required": { "type": "boolean" },
        "min_size": {
          "title": "Minimum Reference Count",
          "type": "integer",
          "default": 0,
          "minimum": 0,
          "exclusiveMaximum": 20
        },
        "max_size": {
          "$comment": "We want to enforce a limitation on how many references can be assigned in practice. This number may change",
          "title": "Maximum Reference Count",
          "type": "integer",
          "exclusiveMinimum": 1,
          "default": 20,
          "maximum": 20
        }
      }
    },
    "EntityReferenceScopeProperties": {
      "title": "Entity Reference Scoping",
      "type": "object",
      "properties": {
        "scope": { "$ref": "#/$defs/EntityReferenceSelectionScope" }
      },
      "required": ["scope"]
    },
    "EntityReferenceSelectionScope": {
      "title": "Selection Scope",
      "description": "When referencing an entity, we need to be able to declare a scope to select from",
      "type": "object",
      "properties": {
        "origin": { "$ref": "#/$defs/EntityReferenceSelectionScopeOrigin" },
        "schemas": { "$ref": "#/$defs/EntityReferenceSelectionSchemas"  },
        "target": { "$ref": "#/$defs/EntityReferenceSelectionScopeTarget" }
      },
      "required": ["origin", "target"],
      "dependencies": {
        "target": {
          "oneOf": [
            { "$ref": "#/$defs/EntityReferenceSelectionScopeTargets/Any" },
            { "$ref": "#/$defs/EntityReferenceSelectionScopeTargets/Descendants" },
            { "$ref": "#/$defs/EntityReferenceSelectionScopeTargets/Links" },
            { "$ref": "#/$defs/EntityReferenceSelectionScopeTargets/Siblings" }
          ]
        }
      }
    },
    "EntityReferenceSelectionScopes": {
      "type": "array",
      "items": {
        "description": "What scopes are available to the entity reference",
        "$ref": "#/$defs/EntityReferenceSelectionScope"
      },
      "minItems": 1
    },
    "EntityReferenceSelectionScopeOrigin": {
      "type": "string",
      "title": "Selection Scope Origin",
      "description": "The originating schema instance to combine with the target and any other options",
      "default": "self",
      "oneOf": [
        { "$ref": "#/$defs/EntityReferenceSelectionScopeOrigins/Ancestor" },
        { "$ref": "#/$defs/EntityReferenceSelectionScopeOrigins/Community" },
        { "$ref": "#/$defs/EntityReferenceSelectionScopeOrigins/Parent" },
        { "$ref": "#/$defs/EntityReferenceSelectionScopeOrigins/Self" }
      ]
    },
    "EntityReferenceSelectionScopeOrigins": {
      "Ancestor": {
        "$ref": "#/$defs/NamedAncestorReference",
        "title": "Ancestor Reference",
        "description": "A named ancestor on the current schema instance"
      },
      "Community": {
        "title": "Community",
        "description": "The community for the current schema instance",
        "type": "string",
        "const": "community"
      },
      "Parent": {
        "title": "Parent",
        "description": "The parent of the current schema instance",
        "type": "string",
        "const": "parent"
      },
      "Self": {
        "title": "Self",
        "description": "The current schema instance itself",
        "type": "string",
        "const": "self"
      }
    },
    "EntityReferenceSelectionSchemas": {
      "type": "array",
      "description": "Limit the selection to entities that implement these schemas",
      "default": [],
      "items": {
        "description": "The acceptable schema(s) for this entity reference",
        "$ref": "#/$defs/Association"
      },
      "maxItems": 5
    },
    "EntityReferenceSelectionScopeTarget": {
      "title": "Selection Scope Target",
      "description": "The target for an entity reference scope",
      "type": "string",
      "default": "descendants",
      "enum": [
        "any",
        "descendants",
        "links",
        "siblings"
      ]
    },
    "EntityReferenceSelectionScopeTargets": {
      "Any": {
        "title": "Any",
        "description": "The referenced entity can come from literally anywhere in the system",
        "type": "object",
        "properties": {
          "origin": {
            "$comment": "We ignore the origin for any scopes.",
            "const": "self"
          },
          "target": { "const": "any" }
        }
      },
      "Descendants": {
        "title": "Descendants",
        "description": "The referenced entity must be a descendant of the schema instance",
        "type": "object",
        "properties": {
          "target": { "const": "descendants" },
          "depth": {
            "title": "Relative Depth",
            "oneOf": [
              { "type": "null" },
              { "type": "integer", "exclusiveMinimum": 0 }
            ]
          }
        }
      },
      "Links": {
        "title": "Links",
        "description": "The referenced entity must be linked to or from the schema instance",
        "properties": {
          "target": { "const": "links" },
          "direction": { "$ref": "#/$defs/LinkReferenceDirection" }
        }
      },
      "Siblings": {
        "title": "Descendants",
        "description": "The referenced entity must be a descendant of the schema instance",
        "type": "object",
        "properties": {
          "origin": {
            "$comment": "We ignore the origin for sibling scopes.",
            "const": "self"
          },
          "target": { "const": "siblings" }
        }
      }
    },
    "Identifier": {
      "description": "An unqualified name that can identify something within a certain namespace in the WDP.",
      "pattern": "^[a-z][a-z0-9_]*[a-z]$",
      "type": "string"
    },
    "LinkReferenceDirection": {
      "title": "Link Direction",
      "type": "string",
      "default": "both",
      "anyOf": [
        {
          "type": "string",
          "title": "Both",
          "description": "This reference will target both incoming and outgoing links.",
          "enum": ["both"]
        },
        {
          "type": "string",
          "title": "Incoming",
          "enum": ["incoming"]
        },
        {
          "type": "string",
          "title": "Outgoing",
          "enum": ["outgoing"]
        }
      ]
    },
    "NamedAncestor": {
      "type": "object",
      "description": "A reference to an ancestor with a specific schema type, it finds the depth-closest ancestor in the tree that matches the schema type",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "name": {
              "$ref": "#/$defs/Identifier",
              "title": "Name",
              "description": "The name of this ancestor association. It must be unique within the current schema."
            },
            "required": {
              "type": "boolean",
              "default": false,
              "title": "Required?",
              "description": "Whether the associated ancestor should be considered required"
            }
          },
          "required": ["name"]
        },
        { "$ref": "#/$defs/Association" }
      ]
    },
    "NamedAncestorReference": {
      "type": "string",
      "pattern": "^ancestor\\.[a-z][a-z0-9_]*[a-z]$"
    },
    "NamedAncestors": {
      "type": "array",
      "items": {
        "description": "A list of (uniquely) named ancestors",
        "$ref": "#/$defs/NamedAncestor"
      },
      "uniqueItems": true
    },
    "Namespace": {
      "description": "A namespace that can contain schema identifiers within the WDP.",
      "pattern": "^[a-z][a-z0-9_]*[a-z]$",
      "type": "string"
    },
    "NamespacedIdentifier": {
      "description": "A unique identifier for a schema within the WDP",
      "pattern": "^(?:[a-z][a-z0-9_]*[a-z]):(?:[a-z][a-z0-9_]*[a-z])(?::(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?)?$",
      "type": "string"
    },
    "Order": {
      "type": "object",
      "title": "Field Order",
      "description": "Order by a specified field or schema property.",
      "required": [
        "path",
        "direction"
      ],
      "properties": {
        "path": {
          "title": "Path",
          "$ref": "#/$defs/OrderPath"
        },
        "constant": {
          "type": "boolean",
          "default": false,
          "description": "Whether the field should maintain its set order when inverted."
        },
        "direction": {
          "type": "string",
          "default": "asc",
          "anyOf": [
            {
              "type": "string",
              "title": "Ascending (A-Z)",
              "enum": ["asc"]
            },
            {
              "type": "string",
              "title": "Descending (Z-A)",
              "enum": ["desc"]
            }
          ]
        },
        "nulls": {
          "type": "string",
          "default": "last",
          "anyOf": [
            {
              "type": "string",
              "title": "Null Values Last",
              "enum": ["last"]
            },
            {
              "type": "string",
              "title": "Null Values First",
              "enum": ["first"]
            }
          ]
        }
      }
    },
    "Ordering": {
      "type": "object",
      "title": "Ordering",
      "description": "An ordering describes a way of listing entities",
      "required": [
        "id",
        "select",
        "order"
      ],
      "properties": {
        "id": {
          "title": "Identifier",
          "$ref": "#/$defs/Identifier"
        },
        "name": {
          "title": "Name",
          "description": "A human readable label for the ordering",
          "type": "string"
        },
        "constant": {
          "title": "Constant?",
          "description": "If set to true, this ordering cannot be inverted and only sorts in one direction.",
          "type": "boolean",
          "default": false
        },
        "hidden": {
          "title": "Hidden?",
          "description": "Whether this ordering should be hidden in end-user UIs",
          "type": "boolean",
          "default": false
        },
        "position": {
          "title": "Position",
          "description": "The (optional) deterministic position for an ordering when listing it",
          "type": "number"
        },
        "handles": {
          "title": "Handles Schema",
          "description": "An ordering can be set up to handle rendering certain schemas in the explore browser on the frontend.",
          "$ref": "#/$defs/AssociationSansVersion"
        },
        "filter": {
          "type": "object",
          "title": "Filter",
          "description": "Used to filter which children should be included in the ordering",
          "properties": {
            "schemas": {
              "description": "Limit the selection to entities that consume these schemas",
              "type": "array",
              "items": {
                "description": "These strings should be existing Schema IDs",
                "$ref": "#/$defs/OrderingSchemaFilter"
              }
            }
          }
        },
        "order": {
          "description": "Specifies how to order the ordering",
          "items": {
            "$ref": "#/$defs/Order"
          },
          "minItems": 1,
          "maxItems": 7,
          "type": "array"
        },
        "render": {
          "type": "object",
          "title": "Render Options",
          "description": "Options for controlling how entities in an ordering render. These can have larger effects on the rest of the ordering",
          "properties": {
            "mode": { "$ref": "#/$defs/OrderingRenderMode" }
          }
        },
        "select": {
          "type": "object",
          "title": "Child Selection",
          "description": "This defines what depth and type(s) of child entities will be included in the ordering",
          "properties": {
            "direct": {
              "title": "Child Entities",
              "description": "Whether no, direct descendants, or all descendants should be displayed. Note: if `render.mode` is set to `tree`, any value set here will be ignored and the application will act as though `descendants` was set.",
              "default": "children",
              "type": "string",
              "anyOf": [
                {
                  "type": "string",
                  "title": "No children",
                  "enum": ["none"]
                },
                {
                  "type": "string",
                  "title": "Direct Children",
                  "enum": ["children"]
                },
                {
                  "type": "string",
                  "title": "All Descendants",
                  "enum": ["descendants"]
                }
              ]
            },
            "links": {
              "title": "Linked Entities",
              "description": "What type(s) of links to include in the ordering",
              "type": "object",
              "properties": {
                "contains": {
                  "title": "Contained?",
                  "type": "boolean",
                  "default": false
                },
                "references": {
                  "title": "Referenced?",
                  "type": "boolean",
                  "default": false
                }
              }
            }
          }
        },
        "header": {
          "title": "Header",
          "description": "Markdown content that appears before the entitie(s) in the ordering",
          "type": "string"
        },
        "footer": {
          "title": "Footer",
          "description": "Markdown content that appears after the entitie(s) in the ordering",
          "type": "string"
        }
      }
    },
    "OrderPath": {
      "title": "Order Path",
      "description": "A path to an attribute that can be used to sort an ordering",
      "oneOf": [
        { "$ref": "#/$defs/OrderPaths/AncestorPath" },
        { "$ref": "#/$defs/OrderPaths/AncestorSchemaPropertyPath" },
        { "$ref": "#/$defs/OrderPaths/EntityPath" },
        { "$ref": "#/$defs/OrderPaths/LinkPath" },
        { "$ref": "#/$defs/OrderPaths/SchemaPath" },
        { "$ref": "#/$defs/OrderPaths/SchemaPropertyPath" }
      ]
    },
    "OrderPaths": {
      "AncestorPath": {
        "title": "Ancestor Core Property",
        "description": "A core property on an ancestor.",
        "pattern": "^ancestors\\.[a-z][a-z0-9_]*[a-z]\\.[a-z][a-z0-9_]*[a-z]$"
      },
      "AncestorSchemaPropertyPath": {
        "title": "Ancestor Schema Property",
        "description": "A schema property on an ancestor",
        "pattern": "^ancestors\\.[a-z][a-z0-9_]*[a-z]\\.props\\.[a-z][a-z0-9_]*[a-z](?:\\.[a-z][a-z0-9_]*[a-z])?(?:#[a-z][a-z0-9_]*[a-z])?$"
      },
      "EntityPath": {
        "title": "Entity Core Property",
        "description": "An attribute on a child entity (not schema-dependent)",
        "type": "string",
        "enum": [
          "entity.title",
          "entity.created_at",
          "entity.updated_at",
          "entity.published",
          "entity.depth"
        ]
      },
      "LinkPath": {
        "title": "Link Core Property",
        "description": "Sort by link attributes",
        "type": "string",
        "enum": [
          "link.is_link"
        ]
      },
      "SchemaPath": {
        "title": "Schema Core Property",
        "description": "An attribute on the child entity's schema",
        "type": "string",
        "enum": [
          "schema.kind",
          "schema.name"
        ]
      },
      "SchemaPropertyPath": {
        "title": "Schema Property",
        "description": "A schema-derived property (will be null for children that don't have a matching property). Must be of the form props.name#type or props.group.name#type. The #type suffix is optional and can be ommitted, in which case the property will be treated as a string.",
        "type": "string",
        "pattern": "^props\\.[a-z][a-z0-9_]*[a-z](?:\\.[a-z][a-z0-9_]*[a-z])?(?:#[a-z][a-z0-9_]*[a-z])?$"
      }
    },
    "OrderingRenderMode": {
      "type": "string",
      "title": "Render Mode",
      "description": "The mode that entities inside an ordering should render in.",
      "enum": ["flat", "tree"],
      "default": "flat"
    },
    "OrderingSchemaFilter": {
      "type": "object",
      "description": "A declaration of a specific schema that can be included within an order",
      "properties": {
        "namespace": {
          "$ref": "#/$defs/Namespace"
        },
        "identifier": {
          "$ref": "#/$defs/Identifier"
        },
        "version": {
          "description": "An optional declaration of the supported versions of the associated schema",
          "oneOf": [
            {
              "$ref": "#/$defs/VersionRequirement"
            },
            {
              "$ref": "#/$defs/VersionRequirements"
            }
          ]
        }
      },
      "required": ["namespace", "identifier"]
    },
    "PropertyDescription": {
      "type": "string",
      "description": "A human-readable description for the property. It should describe the intent, purpose, and general format of the property for use in forms and metadata."
    },
    "PropertyFunction": {
      "title": "Function",
      "description": "The intended purpose of the property",
      "type": "string",
      "enum": [
        "content",
        "metadata",
        "presentation",
        "sorting",
        "unspecified"
      ],
      "default": "unspecified"
    },
    "PropertyGroup": {
      "title": "Property Group",
      "description": "A logical grouping of properties both in the form and within the persisted data. Only one level of nesting is permitted.",
      "type": "object",
      "required": ["type", "path", "properties"],
      "properties": {
        "type": {
          "title": "Type (fixed)",
          "description": "This cannot be changed",
          "type": "string",
          "const": "group",
          "enum": ["group"]
        },
        "path": {
          "title": "Path",
          "description": "The machine-readable name of this property",
          "$ref": "#/$defs/PropertyPath"
        },
        "legend": {
          "title": "Form Legend",
          "description": "The form legend to use for this group. If not specified, the path will be titlecased.",
          "type": "string"
        },
        "description": {
          "$ref": "#/$defs/PropertyDescription"
        },
        "properties": {
          "type": "array",
          "title": "Properties",
          "description": "The group's properties",
          "default": [{ "type": "string" }],
          "items": {
            "$ref": "#/$defs/ScalarProperty"
          }
        }
      }
    },
    "PropertyMapping": {
      "$comment": "API not stable. Likely to change.",
      "title": "Mapping",
      "type": "object",
      "properties": {
        "standard": {
          "type": "string",
          "enum": [
            "JATS",
            "OAI-PMH"
          ]
        },
        "entity": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "PropertyMappings": {
      "$comment": "Mappings can be used in the future to map this attribute to accepted metadata standards",
      "title": "External Mappings",
      "description": "Not Yet Used",
      "type": "array",
      "uniqueItems": true,
      "items": { "$ref": "#/$defs/PropertyMapping" }
    },
    "PropertyPath": {
      "description": "A path can reference a schema property",
      "pattern": "^[a-z][a-z0-9_]*[a-z]$",
      "type": "string"
    },
    "ScalarProperty": {
      "type": "object",
      "required": ["type", "path"],
      "properties": {
        "path": {
          "title": "Path",
          "description": "The accessible path to this property. When contained in a group, the full path will be prefixed by the group's path",
          "$ref": "#/$defs/PropertyPath"
        },
        "type": {
          "title": "Type",
          "$ref": "#/$defs/ScalarPropertyType"
        },
        "label": {
          "title": "Label",
          "description": "The human-readable label for this property. The path will be titlecased if this value is not provided.",
          "type": "string"
        },
        "description": { "$ref": "#/$defs/PropertyDescription" },
        "mappings": { "$ref": "#/$defs/PropertyMappings" },
        "required": {
          "title": "Required?",
          "description": "Whether the property is required for base validity",
          "type": "boolean",
          "default": false
        },
        "unorderable": {
          "title": "Unorderable?",
          "description": "This can be toggled on if the property _could_ be ordered, but shouldn't be. Strings that will not sort logically, numbers that are not intended for sorting, etc." ,
          "type": "boolean",
          "default": false
        },
        "wide": {
          "title": "Is Wide?",
          "description": "Whether the field should take up the full width of a schema property form. Most types will default to not",
          "type": "boolean",
          "default": false
        },
        "function": { "$ref": "#/$defs/PropertyFunction" }
      },
      "dependencies": {
        "type": {
          "oneOf": [
            {
              "$ref": "#/$defs/ScalarPropertyDefinitions/Asset"
            },
            {
              "$ref": "#/$defs/ScalarPropertyDefinitions/Assets"
            },
            {
              "$ref": "#/$defs/ScalarPropertyDefinitions/Boolean"
            },
            {
              "$ref": "#/$defs/ScalarPropertyDefinitions/Contributor"
            },
            {
              "$ref": "#/$defs/ScalarPropertyDefinitions/Contributors"
            },
            {
              "$ref": "#/$defs/ScalarPropertyDefinitions/ControlledVocabulary"
            },
            {
              "$ref": "#/$defs/ScalarPropertyDefinitions/ControlledVocabularies"
            },
            {
              "$ref": "#/$defs/ScalarPropertyDefinitions/Date"
            },
            {
              "$ref": "#/$defs/ScalarPropertyDefinitions/Email"
            },
            {
              "$ref": "#/$defs/ScalarPropertyDefinitions/Entities"
            },
            {
              "$ref": "#/$defs/ScalarPropertyDefinitions/Entity"
            },
            {
              "$ref": "#/$defs/ScalarPropertyDefinitions/Float"
            },
            {
              "$ref": "#/$defs/ScalarPropertyDefinitions/FullText"
            },
            {
              "$ref": "#/$defs/ScalarPropertyDefinitions/Integer"
            },
            {
              "$ref": "#/$defs/ScalarPropertyDefinitions/Markdown"
            },
            {
              "$ref": "#/$defs/ScalarPropertyDefinitions/Multiselect"
            },
            {
              "$ref": "#/$defs/ScalarPropertyDefinitions/Select"
            },
            {
              "$ref": "#/$defs/ScalarPropertyDefinitions/String"
            },
            {
              "$ref": "#/$defs/ScalarPropertyDefinitions/Tags"
            },
            {
              "$ref": "#/$defs/ScalarPropertyDefinitions/Timestamp"
            },
            {
              "$ref": "#/$defs/ScalarPropertyDefinitions/URL"
            },
            {
              "$ref": "#/$defs/ScalarPropertyDefinitions/VariableDate"
            }
          ]
        }
      }
    },
    "ScalarPropertyDefinitions": {
      "Asset": {
        "title": "Asset",
        "description": "A value that references a single asset",
        "properties": {
          "type": { "enum": ["asset"] }
        },
        "required": ["path", "type"]
      },
      "Assets": {
        "title": "Assets",
        "description": "A value that references multiple deterministically-ordered assets",
        "properties": {
          "type": { "enum": ["assets"] }
        },
        "required": ["path", "type"],
        "allOf": [
          { "$ref": "#/$defs/CollectedReferenceProperties" }
        ]
      },
      "Boolean": {
        "title": "Boolean",
        "description": "A boolean value (True / False)",
        "properties": {
          "type": { "enum": ["boolean"] }
        },
        "required": ["path", "type"]
      },
      "Contributor": {
        "title": "Contributor",
        "description": "A value that references a single contributor",
        "properties": {
          "type": { "enum": ["contributor"] }
        },
        "required": ["path", "type"]
      },
      "Contributors": {
        "title": "Contributors",
        "description": "A value that references multiple deterministically-ordered contributors",
        "properties": {
          "type": { "enum": ["contributors"] }
        },
        "required": ["path", "type"],
        "allOf": [
          { "$ref": "#/$defs/CollectedReferenceProperties" }
        ]
      },
      "ControlledVocabulary": {
        "title": "Controlled Vocabulary",
        "description": "A value that references a single Controlled Vocabulary Item in the system.",
        "properties": {
          "type": { "enum": ["controlled_vocabulary"] },
          "wants": {
            "type": "string",
            "description": "The provider selector for the CV desired by this property."
          }
        },
        "required": ["path", "type", "wants"]
      },
      "ControlledVocabularies": {
        "title": "Controlled Vocabularies",
        "description": "A value that references multiple Controlled Vocabulary Item in the system.",
        "properties": {
          "type": { "enum": ["controlled_vocabularies"] },
          "wants": {
            "type": "string",
            "description": "The provider selector for the CV desired by this property."
          }
        },
        "required": ["path", "type", "wants"],
        "allOf": [
          { "$ref": "#/$defs/CollectedReferenceProperties" }
        ]
      },
      "Date": {
        "title": "Date",
        "description": "An ISO8601 Date that represents a single calendar date",
        "properties": {
          "type": { "enum": ["date"] }
        },
        "required": ["path","type"]
      },
      "Email": {
        "title": "Email",
        "description": "A value that references an email address",
        "properties": {
          "type": { "enum": ["email"] },
          "default": {
            "title": "Default Value",
            "type": "string",
            "format": "email"
          }
        },
        "required": ["path", "type"]
      },
      "Entities": {
        "title": "Entities",
        "description": "An optionally-scoped, deterministically-ordered collection of references to other entities in the system",
        "properties": {
          "type": { "enum": ["entities"] }
        },
        "required": ["path", "type"],
        "allOf": [
          { "$ref": "#/$defs/EntityReferenceScopeProperties" },
          { "$ref": "#/$defs/CollectedReferenceProperties" }
        ]
      },
      "Entity": {
        "title": "Entity",
        "description": "An optionally-scoped reference to another entity in the system",
        "properties": {
          "type": { "enum": ["entity"] }
        },
        "required": ["path", "type"],
        "allOf": [
          { "$ref": "#/$defs/EntityReferenceScopeProperties" }
        ]
      },
      "Float": {
        "title": "Float",
        "description": "A floating point numeral (uses decimal types for maximum precision)",
        "properties": {
          "type": { "enum": ["float"] },
          "default": {
            "title": "Default Value",
            "type": "number"
          },
          "gt": {
            "title": "Greater Than (>)",
            "description": "The property's value must be greater than this, if provided",
            "type": "number"
          },
          "gte": {
            "title": "Greater Than Or Equal To (≥)",
            "description": "The property's value must be greater than or equal to this, if provided",
            "type": "number"
          },
          "lt": {
            "title": "Less Than (<)",
            "description": "The property's value must be less than this, if provided",
            "type": "number"
          },
          "lte": {
            "title": "Less Than Or Equal To (≤)",
            "description": "The property's value must be less than or equal to this, if provided",
            "type": "number"
          }
        },
        "required": ["path", "type"]
      },
      "FullText": {
        "title": "Full Text",
        "description": "A reference to a full-text value (with search capabilities)",
        "properties": {
          "type": { "enum": ["full_text"] }
        },
        "required": ["path", "type"]
      },
      "Integer": {
        "title": "Integer",
        "description": "An integer (or whole number)",
        "properties": {
          "type": {
            "enum": [
              "integer"
            ]
          },
          "default": {
            "title": "Default Value",
            "type": "integer"
          },
          "gt": {
            "title": "Greater Than (>)",
            "description": "The property's value must be greater than this, if provided",
            "type": "integer"
          },
          "gte": {
            "title": "Greater Than Or Equal To (≥)",
            "description": "The property's value must be greater than or equal to this, if provided",
            "type": "integer"
          },
          "lt": {
            "title": "Less Than (<)",
            "description": "The property's value must be less than this, if provided",
            "type": "integer"
          },
          "lte": {
            "title": "Less Than Or Equal To (≤)",
            "description": "The property's value must be less than or equal to this, if provided",
            "type": "integer"
          }
        },
        "required": ["path", "type"]
      },
      "Markdown": {
        "title": "Markdown",
        "description": "Markdown-formatted text",
        "properties": {
          "type": { "enum": ["markdown"] },
          "default": {
            "title": "Default Value",
            "type": "string"
          },
          "min_size": {
            "title": "Minimum Size",
            "description": "The length cannot be less than this value.",
            "minimum": 0,
            "type": "integer"
          },
          "max_size": {
            "title": "Maximum Size",
            "description": "The length cannot be greater than this value.",
            "type": "integer"
          }
        },
        "required": ["path", "type"]
      },
      "Multiselect": {
        "title": "Multiselect",
        "description": "A select dropdown that supports selecting multiple options",
        "properties": {
          "type": { "enum": ["multiselect"] },
          "options": {
            "title": "Select Options",
            "items": {
              "$ref": "#/$defs/SelectOption"
            },
            "minItems": 1,
            "type": "array",
            "uniqueItems": true
          },
          "default": {
            "title": "Default Value",
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true
          },
          "min_size": {
            "title": "Minimum Size",
            "description": "The size cannot be less than this value.",
            "minimum": 0,
            "type": "integer"
          },
          "max_size": {
            "title": "Maximum Size",
            "description": "The size cannot be greater than this value.",
            "type": "integer"
          }
        },
        "required": ["path", "type", "options"]
      },
      "Select": {
        "title": "Select",
        "description": "A select dropdown that supports selecting a single option",
        "properties": {
          "type": {"enum": ["select"] },
          "options": {
            "title": "Select Options",
            "items": {
              "$ref": "#/$defs/SelectOption"
            },
            "minItems": 1,
            "type": "array",
            "uniqueItems": true
          },
          "default": {
            "title": "Default Value",
            "type": "string"
          }
        },
        "required": ["path", "type", "options"]
      },
      "String": {
        "title": "String",
        "description": "A simple text value",
        "properties": {
          "type": { "enum": ["string"] },
          "default": {
            "title": "Default Value",
            "type": "string"
          },
          "pattern": {
            "type": "string",
            "format": "regex"
          },
          "min_size": {
            "title": "Minimum Size",
            "description": "The length cannot be less than this value.",
            "minimum": 0,
            "type": "integer"
          },
          "max_size": {
            "title": "Maximum Size",
            "description": "The length cannot be greater than this value.",
            "type": "integer"
          }
        },
        "required": ["path", "type"]
      },
      "Tags": {
        "title": "Tags",
        "description": "A value that represents multiple unique string inputs",
        "properties": {
          "type": { "enum": ["tags"] },
          "min_size": {
            "title": "Minimum Size",
            "description": "The size cannot be less than this value.",
            "minimum": 0,
            "type": "integer"
          },
          "max_size": {
            "title": "Maximum Size",
            "description": "The size cannot be greater than this value.",
            "type": "integer"
          }
        },
        "required": ["path", "type"]
      },
      "Timestamp": {
        "title": "Timestamp",
        "description": "An ISO8601 Timestamp that represents a single point in time",
        "properties": {
          "type": { "enum": ["timestamp"] }
        },
        "required": ["path", "type"]
      },
      "URL": {
        "title": "URL",
        "description": "A representation of a URL",
        "properties": {
          "type": { "enum": ["url"] }
        },
        "required": ["path", "type"]
      },
      "VariableDate": {
        "title": "Variable Date",
        "description": "A date with variable precision",
        "properties": {
          "type": { "enum": ["variable_date"] }
        },
        "required": ["path", "type"]
      }
    },
    "ScalarPropertyType": {
      "description": "A type for any property that is not a group",
      "enum": [
        "asset",
        "assets",
        "boolean",
        "contributor",
        "contributors",
        "controlled_vocabulary",
        "controlled_vocabularies",
        "date",
        "email",
        "entities",
        "entity",
        "float",
        "full_text",
        "integer",
        "markdown",
        "multiselect",
        "select",
        "string",
        "tags",
        "timestamp",
        "url",
        "variable_date"
      ],
      "type": "string"
    },
    "Schema": {
      "title": "A WDP Schema",
      "description": "Representing a WDP schema version in its entirety.",
      "type": "object",
      "required": [
        "namespace",
        "identifier",
        "name",
        "version",
        "kind"
      ],
      "properties": {
        "namespace": {
          "title": "Namespace",
          "description": "This identifies the namespace within which this schema should live.",
          "$ref": "#/$defs/Namespace"
        },
        "identifier": {
          "title": "Identifier",
          "description": "This identifies the schema within its namespace.",
          "$ref": "#/$defs/Identifier"
        },
        "name": {
          "title": "Name",
          "description": "A human readable label that can be used to reference this schema",
          "type": "string"
        },
        "version": {
          "title": "Version",
          "$ref": "#/$defs/SemanticVersion"
        },
        "kind": {
          "title": "Kind",
          "description": "The kind of entity that will implement this schema. Entities are also referred to as instances of the schema",
          "$ref": "#/$defs/SchemaKind"
        },
        "ancestors": {
          "$ref": "#/$defs/NamedAncestors"
        },
        "parents": {
          "$ref": "#/$defs/Associations",
          "description": "The type(s) of parent(s) this schema accepts."
        },
        "children": {
          "$ref": "#/$defs/Associations",
          "description": "The type(s) of direct children this schema accepts."
        },
        "orderings": {
          "title": "Orderings",
          "description": "A schema can provide default orderings, which an instance can override.",
          "items": {
            "$ref": "#/$defs/Ordering"
          },
          "type": "array"
        },
        "properties": {
          "title": "Properties",
          "description": "Describes the properties that will be available for this schema",
          "type": "array",
          "items": {
            "$ref": "#/$defs/TopLevelProperty"
          }
        },
        "render": {
          "$ref": "#/$defs/SchemaRenderDefinition"
        }
      }
    },
    "SchemaKind": {
      "type": "string",
      "title": "Schema Kind",
      "description": "Lists the type of WDP model that can implement this schema.",
      "enum": [
        "community",
        "collection",
        "item"
      ]
    },
    "SchemaRenderDefinition": {
      "type": "object",
      "title": "Render Options",
      "description": "Options for controlling how to render instances of this schema in isolated contexts, outside of orderings.",
      "additionalProperties": false,
      "properties": {
        "list_mode": { "$ref": "#/$defs/SchemaRenderListMode" }
      }
    },
    "SchemaRenderListMode": {
      "type": "string",
      "title": "List Render Mode",
      "description": "How instances that implement this schema should be rendered outside of an ordering, when showing only entities of the same type",
      "default": "grid",
      "anyOf": [
        {
          "type": "string",
          "title": "Grid",
          "enum": ["grid"]
        },
        {
          "type": "string",
          "title": "Table",
          "enum": ["table"]
        },
        {
          "type": "string",
          "title": "Tree",
          "enum": ["tree"]
        }
      ]
    },
    "SelectOption": {
      "additionalProperties": false,
      "description": "An option for a select or a multi-select",
      "properties": {
        "label": {
          "description": "The human-readable label associated with the option",
          "type": "string"
        },
        "value": {
          "description": "The computer-readable value associated with the option—must be unique within the collection.",
          "type": "string"
        }
      },
      "required": ["label", "value"],
      "type": "object"
    },
    "SemanticVersion": {
      "description": "A semantic version (https://semver.org)",
      "pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
      "type": "string"
    },
    "TopLevelProperty": {
      "oneOf": [
        { "title": "Property", "$ref": "#/$defs/ScalarProperty" },
        { "title": "Group", "$ref": "#/$defs/PropertyGroup" }
      ]
    },
    "VersionRequirement": {
      "type": "string",
      "description": "A declaration for matching semantic version requirements",
      "pattern": "\\s*(=|!=|\u003e|\u003c|\u003e=|\u003c=|~\u003e)?\\s*([0-9]+(\\.[0-9a-zA-Z]+)*(-[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?)\\s*"
    },
    "VersionRequirements": {
      "type": "array",
      "description": "An array of version requirements, for establishing constraints",
      "items": {
        "$ref": "#/$defs/VersionRequirement"
      }
    }
  },
  "$ref": "#/$defs/Schema"
}
